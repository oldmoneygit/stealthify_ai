import './load-env';
import { getLocalProducts } from '@/services/woocommerce.service';
import { analyzeBatch } from '@/services/orchestrator.service';

async function testBatch() {
  console.log('üß™ Testando Batch Processing...\n');

  try {
    // Get first 3 products
    const allProducts = getLocalProducts();

    if (allProducts.length === 0) {
      console.log('‚ö†Ô∏è Nenhum produto no banco.');
      console.log('Execute: pnpm test:woo para sincronizar produtos\n');
      process.exit(1);
    }

    const products = allProducts.slice(0, 3);

    console.log(`üì¶ Selecionados ${products.length} produtos:`);
    products.forEach((p, i) => {
      console.log(`   ${i + 1}. ${p.sku} - ${p.name}`);
    });

    // Run batch
    console.log('\nüöÄ Iniciando batch...\n');

    const results = await analyzeBatch(products, (current, total, result) => {
      console.log(`\nüìä Progresso: ${current}/${total}`);
      console.log(`   Status: ${result.status}`);
      console.log(`   Risk Score: ${result.risk_score}`);
    });

    // Summary
    console.log('\n' + '='.repeat(60));
    console.log('üìä RESUMO DO BATCH');
    console.log('='.repeat(60));
    console.log(`Total: ${results.length}`);
    console.log(`‚úÖ Clean: ${results.filter(r => r.status === 'clean').length}`);
    console.log(`‚ö†Ô∏è Blur: ${results.filter(r => r.status === 'blur_applied').length}`);
    console.log(`‚ùå Failed: ${results.filter(r => r.status === 'failed').length}`);

    console.log('\n‚úÖ Batch testado com sucesso!\n');

  } catch (error) {
    console.error('\n‚ùå Erro no teste:', error);
    process.exit(1);
  }
}

testBatch();
